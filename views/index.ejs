<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
    </title>
    <link rel="stylesheet" href="/styles/style.css">
    <!-- <link rel="stylesheet" href="/styles/bootstrap.min.css"> -->
    <link rel="icon" href="/img/favicon.png" type="image/png">
    <script src="/js/typewriter-effect2.21.0.js"></script>
    <!-- <script src="/js/typewriter-effect2.21.0.js"></script> -->
</head>


<body>
    <div class="w-100" style="padding: 50px;">
        <div id="terminal-container">
            <p id="text"></p>
            <div class="flex row">
                <div class="flex column" style="min-width: 30%;">
                    <a id="link1"></a>
                    <a id="link2"></a>
                    <a id="link3"></a>
                    <a id="link4"></a>
                    <a id="link5"></a>
                    <a id="link6"></a>
                </div>
                <div class="flex column">
                    <a id="link7"></a>
                    <a id="link8"></a>
                    <a id="link9"></a>
                    <a id="link10"></a>
                    <a id="link11"></a>
                    <a id="link12"></a>
                </div>
            </div>
        </div>

        <iframe id="frame" src="" frameborder="0" scrolling="no" onload="resizeAndTitle(this)"
            referrerpolicy="strict-origin-when-cross-origin"></iframe>

    </div>
</body>

</html>

<script>
    function decode(a) {
        return a.replace(/[a-zA-Z]/g, function (c) {
            return String.fromCharCode((c <= "Z" ? 90 : 122) >= (c = c.charCodeAt(0) + 13) ? c : c - 26);
        })
    };

    function openMailer(element) {
        var parts = [decode('avrmhunh'), decode('cbfg'), decode('f.qr')]
        element.setAttribute("href", `mailto:${parts[1]}@${parts[0] + parts[2]}`);
        element.setAttribute("onclick", "");
    };

    function resizeAndTitle(obj) {
        // resizing the iframe to the content
        obj.style.height = obj.contentWindow.document.documentElement.scrollHeight + 'px';
        // setting the title of the document
        document.title = 'niezuhaus - ' + (response?.name?.substring(1) || 'portfolio');
    }

    const delay = 1;
    const pauseBetweenLinks = 50;
    // link html refs
    var textref = document.getElementById('text');
    linkRefs = [
    ];
    var condition = true;
    while (condition) {
        var link = document.getElementById('link' + (linkRefs.length + 1));
        if (link) {
            linkRefs.push(link);
        } else {
            condition = false;
        }
    }
    var frame = document.getElementById('frame');

    // creating the typewriters
    var typewriter = new Typewriter(textref, {
        loop: false,
        delay: delay,
        deleteSpeed: delay,
    });
    var linkwriter = [];
    for (let i = 0; i < linkRefs.length; i++) {
        linkwriter[i] = new Typewriter(linkRefs[i], {
            loop: false,
            delay: delay,
            deleteSpeed: delay,
            cursor: ''
        });
    }

    var response;
    var lastResponse;

    function fillLinks() {
        linkwriter.forEach((writer, i) => {
            var link = linkRefs[i];
            link.removeAttribute("href");
            if (response.links[i]) {
                link.style.display = 'unset';
            }
            link.onclick = () => { }
            writer
                .deleteChars(lastResponse?.links[i]?.name?.length || 1)
                .pauseFor(pauseBetweenLinks)
                .typeString(response?.links[i]?.name || '')
                .callFunction(() => {
                    if (!response.links[i]) {
                        link.style.display = 'none';
                    }
                })
                .start()
        });
        response.links.forEach((link, i) => {
            let linkRef = linkRefs[i];
            if (link.url) {
                linkRef.href = link.url;
                linkRef.target = '_blank'
            } else {
                linkRef.onclick = () => {
                    // next talking step
                    talk(link.to ? link.to : link.name, link.secret);
                }
            }
        });
    };

    var linkIterator

    function talk(msg, secret) {
        var replaceString = msg === '/start' ? '/' : '/p' + msg;
        if (!secret) {
            history.replaceState(null, '', replaceString)
        }
        if (msg) {
            // Send POST request
            fetch('/talk/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ msg: msg })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.answer) {
                        // console.log(data);
                        lastResponse = response;
                        response = data;
                        // delete everything
                        textref.innerHTML = ''
                        // update frame
                        frame.src = response?.src ? response.src : ''
                        typewriter = new Typewriter(textref, {
                            loop: false,
                            delay: delay,
                            deleteSpeed: delay,
                        });
                        typewriter
                            .pauseFor(500)
                            .typeString(response.answer[0])
                        response.answer.slice(1).forEach(text => {
                            typewriter
                                .pauseFor(1500)
                                .typeString(text)
                        })
                        typewriter
                            .pauseFor(data.notFound ? 2000 : 0)
                            .callFunction(() => {
                                if (data.notFound) {
                                    talk('/start')
                                }
                                // fillLinks()

                            })
                            .start();

                        fillLinks()
                    }
                })
                .catch(error => {
                    // Handle error
                    console.error(error);
                });
        }
    }
    talk("/<%= msg %>");
</script>